// Define some constants
const int steps = 128; // This is the maximum amount a ray can march.
const float smallNumber = 0.001;
const float maxDist = 10.; // This is the maximum distance a ray can travel.

float sdSphere( vec3 p, float s )
{
  return length(p)- s;
}


float sdCircle( vec2 p, float s )
{
  return length(p)- s;
}

float sdOctahedron( vec3 p, float s)
{
  p = abs(p);
  float m = p.x+p.y+p.z-s;
  vec3 q;
       if( 3.0*p.x < m ) q = p.xyz;
  else if( 3.0*p.y < m ) q = p.yzx;
  else if( 3.0*p.z < m ) q = p.zxy;
  else return m*0.57735027;
    
  float k = clamp(0.5*(q.z-q.y+s),0.0,s); 
  return length(vec3(q.x,q.y-s+k,q.z-k)); 
}

float sdTorus( vec3 p, vec2 t )
{
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

// Repeat around the origin by a fixed angle.
// For easier use, num of repetitions is use to specify the angle.
float pModPolar(inout vec2 p, float repetitions) {
	float angle = 2.*PI/repetitions;
	float a = atan(p.y, p.x) + angle/2.;
	float r = length(p);
	float c = floor(a/angle);
	a = mod(a,angle) - angle/2.;
	p = vec2(cos(a), sin(a))*r;
	// For an odd number of repetitions, fix cell index of the cell in -x direction
	// (cell index would be e.g. -5 and 5 in the two halves of the cell):
	if (abs(c) >= (repetitions/2.)) c = abs(c);
	return c;
}
void pR(inout vec2 p, float a) {
	p = cos(a)*p + sin(a)*vec2(p.y, -p.x);
}
float scene(vec3 position){
    // So this is different from the normal sphere equation in that I am
    // splitting the position into it's three different parts
    // and adding a 10th of a cos wave to the x position so it oscillates left 
    // to right and a (positive) sin wave to the z position
    // so it will go back and forth.
        // This is different from the ground equation because the UV is only 
    // between -1 and 1 we want more than 1/2pi of a wave per length of the 
    // screen so we multiply the position by a factor of 10 inside the trig 
    // functions. Since sin and cos oscillate between -1 and 1, that would be 
    // the entire height of the screen so we divide by a factor of 10.
    pR(position.xz, time*0.5);
  
    float ground = bands.y*- + position.y + sin(position.x * 10.) / 10. + cos(position.z * 10.) / 10. + 1.;
    float ground2 = bands.y + position.y + sin(position.x * 10.) / 10. + cos(position.z * 10.) / 10. + 1.;
    //float ground = position.y + sdCircle(position.xz, 0.5) + 2.;
    position = vec3(position.x + sin(time*3.), position.y+sin(time*5.), position.z +sin(time) + 1.);
    float torus = sdTorus(
        vec3(
            position.x + cos(time)/10., 
            position.y, 
            position.z + (sin(time)+2.))
        , vec2(.5,.1));
        
    float sphere = sdSphere(
        vec3(
            position.x + cos(time)/10., 
            position.y, 
            position.z + (sin(time)+2.))
        , .5);
        
    float grounds = min(ground, ground2);
    float single_obj = min(sphere,torus);


    // We want to return whichever one is closest to the ray, so we return the 
    // minimum distance.
    return min(single_obj,grounds);
}
 
 vec3 estimateNormal(vec3 p) {
    vec3 n = vec3(
    scene(vec3(p.x + smallNumber, p.yz)) -
    scene(vec3(p.x - smallNumber, p.yz)),
    scene(vec3(p.x, p.y + smallNumber, p.z)) -
    scene(vec3(p.x, p.y - smallNumber, p.z)),
    scene(vec3(p.xy, p.z + smallNumber)) -
    scene(vec3(p.xy, p.z - smallNumber))
);
// poke around the point to get the line perpandicular
// to the surface at p, a point in space.
return normalize(n);
}

vec4 lighting(vec3 pos, vec3 viewDir){
    vec3 lightPos = vec3(cos(time),0,sin(time));
    // light moves left to right
    
    vec3 normal = estimateNormal(pos);
    float diffuse = dot(normal,lightPos);
    
    vec3 reflectDir = reflect(-lightPos, normal); 
    float specularStrength = 3.;
    vec3 specColor = vec3(sin(time),cos(time),0.3);
    float spec = pow( max(dot(viewDir, reflectDir), 0.0), 32.);
    vec3 specular = specularStrength * spec * specColor;
    vec4 ambient = vec4(purple * 0.2,1.0);
    return  vec4(diffuse) + vec4(specular,1.0) + ambient;
}
 
 
vec4 march (vec3 origin, vec3 direction){
    
    float dist = 0.;
    float totalDistance = 0.;
    vec3 positionOnRay = origin;
    
    for(int i = 0 ; i < steps; i++){
        
        dist = scene(positionOnRay);
        
        // Advance along the ray trajectory the amount that we know the ray
        // can travel without going through an object.
        positionOnRay += dist * direction;
        
        // Total distance is keeping track of how much the ray has traveled
        // thus far.
        totalDistance += dist;
        
        // If we hit an object or are close enough to an object,
        if (dist < smallNumber){
            // return the lighting
            return lighting(positionOnRay, direction);
 
        }
        
        if (totalDistance > maxDist){
 
            return vec4(0.); // Background color.
        }
    }
    
    return vec4(0.);// Background color.
}

vec3 lookAt(vec2 uv, vec3 camOrigin, vec3 camTarget){
    // we get the z Axis the same way we got the direction vector before
    vec3 zAxis = normalize(camTarget - camOrigin);
    vec3 up = vec3(0,1,0);
    // cross product of two vectors produces a third vector that is 
    // orthogonal to the first two (if you were to make a plane
    // with the first two vectors the third is perpendicular to that
    // plane. Which direction is determined by the 'right hand rule'
    // It is not communicative, so the order here matters.
    vec3 xAxis = normalize(cross(up, zAxis));
    vec3 yAxis = normalize(cross(zAxis, xAxis));
    // normalizing makes the vector of length one by dividing the
    // vector by the sum of squares (the norm).
    
    float fov = 2.;
    // scale each unit vector (aka vector of length one) by the ray origin
    // one for x one for y, there is no z vector so we just add it
    // then we finally scale by FOV
    vec3 dir = (normalize((uv.x * xAxis) + (uv.y * yAxis) + (zAxis * fov)));
    
    return dir;
}

void main() {
    
    vec2 pos = uv();
    float r = sin(time+pos.x);
    float g = sin(time+pos.y);
  

    vec3 camOrigin = vec3(0,0,-5);
	vec3 rayOrigin = vec3(pos + camOrigin.xy, camOrigin.z + 1.);
	vec3 target = vec3(0,sin(time),0);
	vec3 dir = lookAt(pos,camOrigin, target);
    vec4 color = vec4(march(rayOrigin,dir));
    
    gl_FragColor = color;
    gl_FragColor = vec4(color.x+r, color.y+g, color.z,1.0);
    
}
